// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Game extends ethereum.Event {
  get params(): Game__Params {
    return new Game__Params(this);
  }
}

export class Game__Params {
  _event: Game;

  constructor(event: Game) {
    this._event = event;
  }

  get gameSeed(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class HandRegistered extends ethereum.Event {
  get params(): HandRegistered__Params {
    return new HandRegistered__Params(this);
  }
}

export class HandRegistered__Params {
  _event: HandRegistered;

  constructor(event: HandRegistered) {
    this._event = event;
  }

  get participantHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get move(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RPS__entriesResult {
  value0: Address;
  value1: BigInt;
  value2: i32;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: i32, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getTokenId(): BigInt {
    return this.value1;
  }

  getMove(): i32 {
    return this.value2;
  }

  getTimestamp(): BigInt {
    return this.value3;
  }
}

export class RPS__getEntryResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get move(): i32 {
    return this[2].toI32();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class RPS extends ethereum.SmartContract {
  static bind(address: Address): RPS {
    return new RPS("RPS", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  entries(participantHash: Bytes): RPS__entriesResult {
    let result = super.call(
      "entries",
      "entries(bytes32):(address,uint256,uint8,uint256)",
      [ethereum.Value.fromFixedBytes(participantHash)],
    );

    return new RPS__entriesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBigInt(),
    );
  }

  try_entries(participantHash: Bytes): ethereum.CallResult<RPS__entriesResult> {
    let result = super.tryCall(
      "entries",
      "entries(bytes32):(address,uint256,uint8,uint256)",
      [ethereum.Value.fromFixedBytes(participantHash)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RPS__entriesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBigInt(),
      ),
    );
  }

  gameSeed(): BigInt {
    let result = super.call("gameSeed", "gameSeed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gameSeed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gameSeed", "gameSeed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntry(participantHash: Bytes): RPS__getEntryResultValue0Struct {
    let result = super.call(
      "getEntry",
      "getEntry(bytes32):((address,uint256,uint8,uint256))",
      [ethereum.Value.fromFixedBytes(participantHash)],
    );

    return changetype<RPS__getEntryResultValue0Struct>(result[0].toTuple());
  }

  try_getEntry(
    participantHash: Bytes,
  ): ethereum.CallResult<RPS__getEntryResultValue0Struct> {
    let result = super.tryCall(
      "getEntry",
      "getEntry(bytes32):((address,uint256,uint8,uint256))",
      [ethereum.Value.fromFixedBytes(participantHash)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<RPS__getEntryResultValue0Struct>(value[0].toTuple()),
    );
  }

  getParticipantHash(owner: Address, tokenId: BigInt): Bytes {
    let result = super.call(
      "getParticipantHash",
      "getParticipantHash(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );

    return result[0].toBytes();
  }

  try_getParticipantHash(
    owner: Address,
    tokenId: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getParticipantHash",
      "getParticipantHash(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isRegistrationOpen(): boolean {
    let result = super.call(
      "isRegistrationOpen",
      "isRegistrationOpen():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_isRegistrationOpen(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRegistrationOpen",
      "isRegistrationOpen():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  participants(participantHash: Bytes): Address {
    let result = super.call("participants", "participants(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(participantHash),
    ]);

    return result[0].toAddress();
  }

  try_participants(participantHash: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "participants",
      "participants(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(participantHash)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  participationToken(): Address {
    let result = super.call(
      "participationToken",
      "participationToken():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_participationToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "participationToken",
      "participationToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  register(tokenId: BigInt, move: i32): Bytes {
    let result = super.call("register", "register(uint256,uint8):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(move)),
    ]);

    return result[0].toBytes();
  }

  try_register(tokenId: BigInt, move: i32): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "register",
      "register(uint256,uint8):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(move)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  registerPlayer(_player: Address, _tokenId: BigInt, _move: i32): Bytes {
    let result = super.call(
      "registerPlayer",
      "registerPlayer(address,uint256,uint8):(bytes32)",
      [
        ethereum.Value.fromAddress(_player),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_move)),
      ],
    );

    return result[0].toBytes();
  }

  try_registerPlayer(
    _player: Address,
    _tokenId: BigInt,
    _move: i32,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "registerPlayer",
      "registerPlayer(address,uint256,uint8):(bytes32)",
      [
        ethereum.Value.fromAddress(_player),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_move)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get erc721Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ExecuteGameCall extends ethereum.Call {
  get inputs(): ExecuteGameCall__Inputs {
    return new ExecuteGameCall__Inputs(this);
  }

  get outputs(): ExecuteGameCall__Outputs {
    return new ExecuteGameCall__Outputs(this);
  }
}

export class ExecuteGameCall__Inputs {
  _call: ExecuteGameCall;

  constructor(call: ExecuteGameCall) {
    this._call = call;
  }

  get _gameSeed(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteGameCall__Outputs {
  _call: ExecuteGameCall;

  constructor(call: ExecuteGameCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get move(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get participantHash(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RegisterPlayerCall extends ethereum.Call {
  get inputs(): RegisterPlayerCall__Inputs {
    return new RegisterPlayerCall__Inputs(this);
  }

  get outputs(): RegisterPlayerCall__Outputs {
    return new RegisterPlayerCall__Outputs(this);
  }
}

export class RegisterPlayerCall__Inputs {
  _call: RegisterPlayerCall;

  constructor(call: RegisterPlayerCall) {
    this._call = call;
  }

  get _player(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _move(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class RegisterPlayerCall__Outputs {
  _call: RegisterPlayerCall;

  constructor(call: RegisterPlayerCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
